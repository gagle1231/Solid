{"id":"node_modules/rdf-data-factory/lib/Quad.js","dependencies":[{"name":"C:\\Users\\82108\\solid-demo-app\\node_modules\\rdf-data-factory\\lib\\Quad.js.map","includedInParent":true,"mtime":1690072859825},{"name":"C:\\Users\\82108\\solid-demo-app\\package.json","includedInParent":true,"mtime":1691304712566},{"name":"C:\\Users\\82108\\solid-demo-app\\node_modules\\rdf-data-factory\\package.json","includedInParent":true,"mtime":1690072859749}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Quad = void 0;\n/**\n * An instance of DefaultGraph represents the default graph.\n * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.\n */\nclass Quad {\n    constructor(subject, predicate, object, graph) {\n        this.termType = 'Quad';\n        this.value = '';\n        this.subject = subject;\n        this.predicate = predicate;\n        this.object = object;\n        this.graph = graph;\n    }\n    equals(other) {\n        // `|| !other.termType` is for backwards-compatibility with old factories without RDF* support.\n        return !!other && (other.termType === 'Quad' || !other.termType) &&\n            this.subject.equals(other.subject) &&\n            this.predicate.equals(other.predicate) &&\n            this.object.equals(other.object) &&\n            this.graph.equals(other.graph);\n    }\n}\nexports.Quad = Quad;\n"},"sourceMaps":{"js":{"version":3,"file":"Quad.js","sourceRoot":"","sources":["Quad.ts"],"names":[],"mappings":";;;AAEA;;;GAGG;AACH,MAAa,IAAI;IAQf,YACE,OAAiB,EACjB,SAAmB,EACnB,MAAgB,EAChB,KAAe;QAXD,aAAQ,GAAG,MAAM,CAAC;QAClB,UAAK,GAAG,EAAE,CAAC;QAYzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAEM,MAAM,CAAC,KAAuB;QACnC,+FAA+F;QAC/F,OAAO,CAAC,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;YAC9D,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC;YAClC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC;YACtC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC;YAChC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;CACF;AA5BD,oBA4BC","sourcesContent":["import type * as RDF from '@rdfjs/types';\n\n/**\n * An instance of DefaultGraph represents the default graph.\n * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.\n */\nexport class Quad implements RDF.BaseQuad {\n  public readonly termType = 'Quad';\n  public readonly value = '';\n  public readonly subject: RDF.Term;\n  public readonly predicate: RDF.Term;\n  public readonly object: RDF.Term;\n  public readonly graph: RDF.Term;\n\n  public constructor(\n    subject: RDF.Term,\n    predicate: RDF.Term,\n    object: RDF.Term,\n    graph: RDF.Term,\n  ) {\n    this.subject = subject;\n    this.predicate = predicate;\n    this.object = object;\n    this.graph = graph;\n  }\n\n  public equals(other?: RDF.Term | null): boolean {\n    // `|| !other.termType` is for backwards-compatibility with old factories without RDF* support.\n    return !!other && (other.termType === 'Quad' || !other.termType) &&\n      this.subject.equals(other.subject) &&\n      this.predicate.equals(other.predicate) &&\n      this.object.equals(other.object) &&\n      this.graph.equals(other.graph);\n  }\n}\n"]}},"error":null,"hash":"bdbd227660dd2768f81f6cd2641fa1d0","cacheData":{"env":{}}}